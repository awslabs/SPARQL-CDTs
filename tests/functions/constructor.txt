PREFIX cdt:    <http://example.org/cdt/>

# empty list
ASK {
	BIND(cdt:List() AS ?list)
	FILTER(?list = "[]"^^cdt:List)
};

# list with one integer
ASK {
	BIND(cdt:List(1) AS ?list)
	FILTER(?list = "[1]"^^cdt:List)
};

# list with two integers
ASK {
	BIND(cdt:List(1, 2) AS ?list)
	FILTER(?list = "[1, 2]"^^cdt:List)
};

# list with one string
ASK {
	BIND(cdt:List("a") AS ?list)
	FILTER(?list = "['a']"^^cdt:List)
};

# list with two strings
ASK {
	BIND(cdt:List("a", "b") AS ?list)
	FILTER(?list = "['a', 'b']"^^cdt:List)
};

# list with two mixed types
ASK {
	BIND(cdt:List("a", 1) AS ?list)
	FILTER(?list = "["a", 1]"^^cdt:List)
};

# list with error as null
ASK {
	BIND(cdt:List(1/0) AS ?list)
	FILTER(?list = "[null]"^^cdt:List)
};


# list with unbound as null
ASK {
	BIND(cdt:List(?unbound) AS ?list)
	FILTER(?list = "[null]"^^cdt:List)
};

# list with nested empty list
ASK {
	BIND(cdt:List(cdt:List()) AS ?list)
	FILTER(?list = "[[]]"^^cdt:List)
};

# list with nested list with one integer
ASK {
	BIND(cdt:List(cdt:List(1)) AS ?list)
	FILTER(?list = "[[1]]"^^cdt:List)
};

# list with mixed types including nested list
ASK {
	BIND(cdt:List(cdt:List(1), 2) AS ?list)
	FILTER(?list = "[[1], 2]"^^cdt:List)
};

# list with mixed defined and undefined types
ASK {
	BIND(cdt:List(?unbound, 1) AS ?list)
	FILTER(?list = "[null, 2]"^^cdt:List)
};

# rdf literal syntax
ASK {
	BIND(cdt:List() AS ?list)
	BIND("[]"^^cdt:List AS ?expected)
	FILTER(?list = ?expected)
};

# STRDT constructor
ASK {
	BIND(STRDT("[1]", cdt:List) AS ?list)
	FILTER(?list = "[1]"^^cdt:List)
};
